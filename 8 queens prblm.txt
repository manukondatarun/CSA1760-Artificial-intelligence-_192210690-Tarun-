# Taking number of queens as input from user
print ("Enter the number of queens")
N = int(input())

# here we create a chessboard
# NxN matrix with all elements set to 0
board = [[0]*N for _ in range(N)]

def attack(i, j):
    #checking vertically and horizontally
    for k in range(0,N):
        if board[i][k]==1 or board[k][j]==1:
            return True
    #checking diagonally
    for k in range(0,N):
        for l in range(0,N):
            if (k+l==i+j) or (k-l==i-j):
                if board[k][l]==1:
                    return True
    return False

def N_queens(n):
    if n==0:
        return True
    for i in range(0,N):
        for j in range(0,N):
            if (not(attack(i,j))) and (board[i][j]!=1):
                board[i][j] = 1
                if N_queens(n-1)==True:
                    return True
                board[i][j] = 0

    return False

N_queens(N)
for i in board:
    print (i)


output:
# Taking number of queens as input from user
print ("Enter the number of queens")
N = int(input())

# here we create a chessboard
# NxN matrix with all elements set to 0
board = [[0]*N for _ in range(N)]

def attack(i, j):
    #checking vertically and horizontally
    for k in range(0,N):
        if board[i][k]==1 or board[k][j]==1:
            return True
    #checking diagonally
    for k in range(0,N):
        for l in range(0,N):
            if (k+l==i+j) or (k-l==i-j):
                if board[k][l]==1:
                    return True
    return False

def N_queens(n):
    if n==0:
        return True
    for i in range(0,N):
        for j in range(0,N):
            if (not(attack(i,j))) and (board[i][j]!=1):
                board[i][j] = 1
                if N_queens(n-1)==True:
                    return True
                board[i][j] = 0

    return False

N_queens(N)
for i in board:
    print (i)
output:
[1, 2, 3]
[4, 0, 5]
[6, 7, 8]

Solving...
Move: Left
[1, 2, 3]
[0, 4, 5]
[6, 7, 8]

Move: Up
[0, 2, 3]
[1, 4, 5]
[6, 7, 8]

Move: Right
[2, 0, 3]
[1, 4, 5]
[6, 7, 8]

Move: Down
[2, 4, 3]
[1, 0, 5]
[6, 7, 8]

Move: Left
[2, 4, 3]
[0, 1, 5]
[6, 7, 8]

Move: Up
[0, 4, 3]
[2, 1, 5]
[6, 7, 8]

Move: Right
[4, 0, 3]
[2, 1, 5]
[6, 7, 8]

Move: Right
[4, 3, 0]
[2, 1, 5]
[6, 7, 8]

Move: Down
[4, 3, 5]
[2, 1, 0]
[6, 7, 8]

Move: Left
[4, 3, 5]
[2, 0, 1]
[6, 7, 8]

Move: Up
[4, 0, 5]
[2, 3, 1]
[6, 7, 8]

Move: Right
[0, 4, 5]
[2, 3, 1]
[6, 7, 8]

Move: Right
[2, 4, 5]
[0, 3, 1]
[6, 7, 8]

Move: Down
[2, 4, 5]
[3, 0, 1]
[6, 7, 8]

Move: Left
[2, 4, 5]
[3, 1, 0]
[6, 7, 8]

Move: Left
[2, 4, 5]
[1, 3, 0]
[6, 7, 8]

Move: Up
[2, 4, 0]
[1, 3, 5]
[6, 7, 8]

Move: Right
[2, 0, 4]
[1, 3, 5]
[6, 7, 8]

Move: Right
[0, 2, 4]
[1, 3, 5]
[6, 7, 8]

Move: Down
[1, 2, 4]
[0, 3, 5]
[6, 7, 8]

Move: Left
[1, 2, 4]
[3, 0, 5]
[6, 7, 8]

Move: Left
[1, 2, 4]
[3, 5, 0]
[6, 7, 8]

Move: Up
[1, 2, 0]
[3, 5, 4]
[6, 7, 8]

Move: Right
[1, 0, 2]
[3, 5, 4]
[6, 7, 8]

Move: Down
[1, 5, 2]
[3, 0 ,4]
[6, 7 , 8]
